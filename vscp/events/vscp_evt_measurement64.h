/* The MIT License (MIT)
 *
 * Copyright (c) 2014 - 2019, Andreas Merkle
 * http://www.blue-andi.de
 * vscp@blue-andi.de
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

/*******************************************************************************
    DESCRIPTION
*******************************************************************************/
/**
@brief  Double precision floating point measurement
@file   vscp_evt_measurement64.h
@author Andreas Merkle, http://www.blue-andi.de

@section desc Description
Floating point double precision measurements. This class mirrors the standard measurement events is
CLASS1.MEASUREMENT=10. The measurement unit is always expressed in the standard unit.

This file is automatically generated. Don't change it manually.

*******************************************************************************/

#ifndef __VSCP_EVT_MEASUREMENT64_H__
#define __VSCP_EVT_MEASUREMENT64_H__

/*******************************************************************************
    INCLUDES
*******************************************************************************/
#include <stdint.h>
#include "vscp_platform.h"

/*******************************************************************************
    COMPILER SWITCHES
*******************************************************************************/

/*******************************************************************************
    CONSTANTS
*******************************************************************************/

/*******************************************************************************
    MACROS
*******************************************************************************/

/*******************************************************************************
    TYPES AND STRUCTURES
*******************************************************************************/

/*******************************************************************************
    VARIABLES
*******************************************************************************/

/*******************************************************************************
    FUNCTIONS
*******************************************************************************/

/**
 * General event
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendGeneralEvent(void);

/* "Count" not supported. No frame defined. */

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendLengthDistance(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendMass(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendTime(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendElectricCurrent(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendTemperature(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendAmountOfSubstance(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendLuminousIntensityIntensityOfLight(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendFrequency(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendRadioactivityAndOtherRandomEvents(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendForce(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendPressure(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendEnergy(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendPower(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendElectricalCharge(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendElectricalPotentialVoltage(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendElectricalCapacitance(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendElectricalResistance(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendElectricalConductance(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendMagneticFieldStrength(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendMagneticFlux(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendMagneticFluxDensity(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendInductance(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendLuminousFlux(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendIlluminance(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendRadiationDose(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendCatalyticActivity(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendVolume(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendSoundIntensity(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendAngle(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendPositionWgs84(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendSpeed(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendAcceleration(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendTension(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendDampMoistHygrometerReading(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendFlow(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendThermalResistance(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendRefractiveOpticalPower(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendDynamicViscosity(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendSoundImpedance(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendSoundResistance(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendElectricElastance(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendLuminousEnergy(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendLuminance(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendChemicalConcentration(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/* "Reserved" not supported. No frame defined. */

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendDoseEquivalent(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/* "Reserved" not supported. No frame defined. */

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendDewPoint(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendRelativeLevel(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendAltitude(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendArea(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendRadiantIntensity(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendRadiance(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendIrradianceExitanceRadiosity(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendSpectralRadiance(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendSpectralIrradiance(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendSoundPressureAcousticPressure(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendSoundEnergyDensity(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

/**
 * Count
 * 
 * @param[in] dataCoding Data coding.
 * @param[in] data Data with format defined by byte 0.  (array[7])
 * @param[in] datasize Size in byte.
 * 
 * @return If event is sent, it will return TRUE otherwise FALSE.
 */
extern BOOL vscp_evt_measurement64_sendSoundLevel(uint8_t dataCoding, uint8_t const * const data, uint8_t dataSize);

#endif  /* __VSCP_EVT_MEASUREMENT64_H__ */
