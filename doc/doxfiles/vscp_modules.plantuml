@startuml

title VSCP-framework

package "Core Modules" as core_modules {
    component "VSCP logger" as logger
    component "VSCP core" as core
    component "VSCP device data" as device_data
    component "VSCP decision matrix" as dm
    component "VSCP decision matrix NG" as dm_ng
    component "VSCP transport" as transport
    component "VSCP utilities" as utilities
    component "VSCP persistent memory" as ps
}

package "Adaption Modules" as adaption_modules {
    component "VSCP timer" as timer #LightBlue
    component "VSCP transport adapter" as transport_adapter #LightBlue
    component "VSCP action" as action #LightBlue
    component "VSCP portable" as portable #LightBlue
    component "VSCP application register" as application_register #LightBlue
    component "VSCP persistent memory access" as ps_access #LightBlue
}

component "CAN" as can #LightGray
component "EEPROM" as eeprom #LightGray

component "Application" as app

app ..> logger: uses
app ..> core: process and uses
app ..> timer: process

logger ..> core: uses
logger ..> ps: uses

core ..> timer: uses
core ..> application_register: read and write
core ..> portable: uses
core ..> device_data: read and write
core ..> dm: forward events
core ..> dm_ng: forward events
core ..> transport: send and receive events
core ..> ps: read and write

dm ..> action: execute
dm ..> portable: uses
dm ..> ps: read

dm_ng ..> ps: read
dm_ng ..> action: execute

ps ..> ps_access: read and write

transport .> utilities: uses
transport ..> transport_adapter: read and write

device_data ..> ps: read
device_data ..> portable: read

transport_adapter ...> can: read and write

ps_access ..> eeprom: read and write

application_register ..> ps_access: read and write

note right of eeprom
    Use a real EEPROM or
    a EEPROM emulation in the flash.
end note

note right of can
    Just an example.
    Other physical transports
    are possible as well.
end note

core_modules -[hidden]------ adaption_modules

@enduml