@startuml

title VSCP Event Abstraction

package "Event Abstraction Modules" as abstraction_modules {
    component "VSCP log" as log #LightGreen
    component "VSCP information" as information #LightGreen
    component "VSCP control" as control #LightGreen
    component "VSCP alarm" as alarm #LightGreen
    component "VSCP measurement" as measurement #LightGreen
    component "VSCP weather" as weather #LightGreen
    component "VSCP weather forecast" as weather_forecast #LightGreen
    component "VSCP security" as security #LightGreen
    component "VSCP measurezone" as measurezone #LightGreen
}

package "Core Modules" as core_modules {
    component "VSCP logger" as logger
    component "VSCP core" as core
    component "VSCP transport" as transport
}

package "Adaption Modules" as adaption_modules {
    component "VSCP transport adapter" as transport_adapter #LightBlue
}

component "CAN" as can #LightGray

component "Application" as app

app ..> log: uses
app ..> information: uses
app ..> control: uses
app ..> alarm: uses
app ..> measurement: uses
app ..> weather: uses
app ..> weather_forecast: uses
app ..> security: uses
app ..> measurezone: uses

log ..> logger: uses
information ..> core: uses
control ..> core: uses
alarm ..> core: uses
measurement ..> core: uses
weather ..> core: uses
weather_forecast ..> core: uses
security ..> core: uses
measurezone ..> core: uses

logger ..> core: uses

core ..> transport: send and receive events

transport ..> transport_adapter: read and write

transport_adapter ..> can: read and write

note right of can
    Just an example.
    Other physical transports
    are possible as well.
end note

@enduml